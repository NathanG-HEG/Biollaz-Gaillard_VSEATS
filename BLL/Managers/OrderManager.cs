using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BLL.BusinessExceptions;
using BLL.Interfaces;
using DataAccessLayer;
using DataAccessLayer.DBAccesses;

namespace BLL
{
    public class OrderManager : IOrderManager
    {
        private OrdersDB OrdersDb { get; }
        private CouriersDB CouriersDb { get; }
        private CompositionDB CompositionDb { get; }
        private DishesDB DishesDb { get; }

        public OrderManager()
        {
            OrdersDb = new OrdersDB();
            CouriersDb = new CouriersDB();
            CompositionDb = new CompositionDB();
            DishesDb = new DishesDB();
        }

        public int CreateNewOrder(int idCustomer, int idArea, DateTime expectedDeliveryTime, string deliveryAddress)
        {

            // Finds an available courier in the area
            int idCourier = -1;
            List<Courier> availableCouriers = CouriersDb.GetAllCouriersByArea(idArea);

            //no courier found at this area
            if (availableCouriers == null)
            {
                throw new BusinessRuleException("No courier registered at area " + idArea);
            }

            //checking if the courier have less than 5 orders per 30 minutes interval
            //stops looping through couriers when one is found
            foreach (var c in availableCouriers)
            {

                //orders are ordered from the latest to the earliest expectedDeliveryTime
                List<Order> currentOrders = GetAllOrdersByCourier(c.IdCourier);

                int nbOrdersIn30Minutes = 0;

                //if the courier has no delivery, no need to check further
                if (currentOrders == null)
                {
                    idCourier = c.IdCourier;
                    break;
                }

                //checking if the courier has less than 5 orders per 30 minutes interval
                foreach (var o in currentOrders)
                {

                    //dateTime.minValue is the default dateTime value
                    //so if it is minValue, then the order has not been delivered
                    if (o.TimeOfDelivery != DateTime.MinValue) continue;


                    if (expectedDeliveryTime <= o.ExpectedDeliveryTime)
                    {
                        //checking for the orders later than the one in creation
                        if (expectedDeliveryTime.AddMinutes(15) >= o.ExpectedDeliveryTime)
                        {
                            nbOrdersIn30Minutes++;
                        }
                    }
                    else
                    {
                        //checking for the orders earlier than the one in creation
                        if (o.ExpectedDeliveryTime.AddMinutes(15) >= expectedDeliveryTime)
                        {
                            nbOrdersIn30Minutes++;
                        }
                        else
                        {
                            //orders are ordered from the latest to the earliest expectedDeliveryTime, so past this point, orders
                            //are more than 15 minutes earlier from the current order
                            break;
                        }
                    }
                }

                //checking for the orders later than the one in creation
                if (nbOrdersIn30Minutes < Utilities.MaxOrdersSimultaneously)
                {
                    idCourier = c.IdCourier;
                    break;
                }
            }

            // if no courier were found, throw businessRuleException
            if (idCourier == -1)
            {
                throw new BusinessRuleException("No courier available at area: " + idArea);
            }

            //addOrder return the order's id generated by sql server
            int idOrder = OrdersDb.AddOrder(idCustomer, idCourier, idArea, expectedDeliveryTime, deliveryAddress);
            if (idOrder == -1)
            {
                throw new DataBaseException("Error occurred, order was not created.");
            }
            return idOrder;
        }

        public void DeleteOrder(int idOrder)
        {
            Order order = OrdersDb.GetOrderById(idOrder);

            //default value for dateTime is minValue
            //so if it is minValue, then order has already been delivered
            if (order.TimeOfDelivery != DateTime.MinValue)
            {
                throw new BusinessRuleException("Cannot delete an order who already has been delivered");
            }

            DateTime deliveryTime = order.ExpectedDeliveryTime;
            if (DateTime.Now.AddHours(3) > deliveryTime)
            {
                throw new BusinessRuleException("Orders have to be cancelled at least 3 hours before");
            }

            //compositions related to the order must be deleted first to respect referential integrity 
            CompositionDb.DeleteCompositionByOrder(idOrder);
            OrdersDb.DeleteOrder(idOrder);
        }

        public void SetOrderToDelivered(int idOrder)
        {

            //result is the number of rows affected, so if it is 0 then the status was not updated
            int result = OrdersDb.SetOrderToDelivered(idOrder);
            if (result == 0)
            {
                throw new DataBaseException("Error occurred, delivery time of order " + idOrder + " has not been set.");
            }
        }

        public List<Order> GetAllOrdersByCustomer(int idCustomer)
        {
            return OrdersDb.GetAllOrdersByCustomer(idCustomer);
        }

        public List<Order> GetAllOrdersByCourier(int idCourier)
        {
            return OrdersDb.GetAllOrdersByCourier(idCourier);
        }

        public List<Order> GetAllOrdersByRestaurant(int idRestaurant)
        {
            return OrdersDb.GetAllOrdersByRestaurant(idRestaurant);
        }

        public void SetTotal(int idOrder)
        {
            List<Composition> compositions = CompositionDb.GetCompositionsByOrder(idOrder);

            int total = 0;
            foreach (var c in compositions)
            {
                Dish dish = DishesDb.GetDishById(c.ID_Dish);
                total += dish.Price * c.Quantity;
            }
            OrdersDb.SetTotal(idOrder, total);
        }

        public Order GetOrderById(int idOrder)
        {
            return OrdersDb.GetOrderById(idOrder);
        }
    }
}
